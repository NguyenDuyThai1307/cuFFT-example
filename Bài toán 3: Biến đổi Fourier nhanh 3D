#include <iostream>
#include <cufft.h>
#include <cuda_runtime.h>

int main() {
    int Nx = 32, Ny = 32, Nz = 32;  // Kích thước khối 3D
    cufftComplex *d_data, *d_output;

    cudaMalloc((void**)&d_data, sizeof(cufftComplex) * Nx * Ny * Nz);
    cudaMalloc((void**)&d_output, sizeof(cufftComplex) * Nx * Ny * Nz);

    // Tạo dữ liệu 3D giả
    cufftComplex *h_data = new cufftComplex[Nx * Ny * Nz];
    for (int i = 0; i < Nx; ++i) {
        for (int j = 0; j < Ny; ++j) {
            for (int k = 0; k < Nz; ++k) {
                h_data[(i * Ny + j) * Nz + k].x = sin(2 * M_PI * (i + j + k) / 10);
                h_data[(i * Ny + j) * Nz + k].y = 0;
            }
        }
    }

    cudaMemcpy(d_data, h_data, sizeof(cufftComplex) * Nx * Ny * Nz, cudaMemcpyHostToDevice);

    // Khởi tạo cuFFT plan 3D
    cufftHandle plan;
    cufftPlan3d(&plan, Nx, Ny, Nz, CUFFT_C2C);

    // Thực hiện FFT 3D
    cufftExecC2C(plan, d_data, d_output, CUFFT_FORWARD);

    // Sao chép kết quả về host
    cudaMemcpy(h_data, d_output, sizeof(cufftComplex) * Nx * Ny * Nz, cudaMemcpyDeviceToHost);

    // In kết quả
    std::cout << "FFT 3D Output (real part):\n";
    for (int i = 0; i < Nx; ++i) {
        for (int j = 0; j < Ny; ++j) {
            for (int k = 0; k < Nz; ++k) {
                std::cout << h_data[(i * Ny + j) * Nz + k].x << " ";
            }
            std::cout << std::endl;
        }
    }

    // Dọn dẹp bộ nhớ
    cufftDestroy(plan);
    cudaFree(d_data);
    cudaFree(d_output);
    delete[] h_data;

    return 0;
}
